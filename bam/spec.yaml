file:
  version: 0.1
  header_records:
    - type: RG
      field: ID
      content: <read_data::run_id>_<read_data::model_version_id>_<barcode_data::arrangement>
      required: true
      examples:
        - "12ddefc_2021-05-17_dna_r9.4.1_minion_96_29d8704b_barcode02"
        - "12ddefc_unknown_barcode02"
        - "12ddefc_2021-05-17_dna_r9.4.1_minion_96_29d8704b"
      comments: |
        ``model_version_id`` if missing shall be replaced with the text "unknown"

        ``barcode_data::arrangement`` if missing the suffix will not be appended.
    - type: RG
      field: DT
      content: <exp_start_time>
      required: false
      comments: |
        Correctly formatted as ISO8601
    - type: RG
      field: DS
      content: "runid=([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\\s+basecall_model=([a-z0-9_@\\.]+)(\\s+modbase_models=([A-Za-z0-9_@\\.]+))?"
      examples:
        - runid=e4994c62-93f9-439a-bc8f-d20c95a137a5 basecall_model=rna004_130bps_fast@v5.1.0
        - runid=e4994c62-93f9-439a-bc8f-d20c95a137a5 basecall_model=rna004_130bps_fast@v5.1.0 modbase_models=rna004_130bps_hac@v5.1.0_inosine_m6A@v1
      required: true
      comments: |
        `runid` Should contain the protocol_run_id from the minknow experiment that generated the bam files.
        Note, modbase_models only appears if modbase calling was performed, and contains a comma separated list of dorado modbase model names used.
    - type: RG
      field: LB
      content: <read_data::sample_id>
      required: false
      comments: Included only if data is present.
    - type: RG
      field: PL
      content: ONT
      required: true
    - type: RG
      field: PM
      content: <device_id>
      required: false
    - type: RG
      field: PU
      content: <flow_cell_id>
      required: false
    - type: RG
      field: SM
      content: <barcode_data::arrangement>
      required: false
      comment: Included only if data is present and the arrangement is not "unclassified"
    - type: RG
      field: al
      content: <sample_alias>
      required: false
      comment: |
        This will be the same barcode descriptor guppy uses for generating the output folder names,
        which is the sample sheet alias if available otherwise defaulting to the arrangement name.
    - type: PG
      field: ID
      content: <program_id>{_<unique_id}>}
      required: true
      comments: |
        The SAM specification requires this field to be unique within a file, and may be modified on merging to ensure
        uniqueness. Where the program_id would not be unique within the file, e.g. when the input is a bam/sam file
        with the program_id already present, then the @PG record will have the lowest zero based suffix that can be
        appended to the ID to ensure its uniqueness, e.g. "_0".
        Where an application has used the minimap aligner on reads contained in the file, as well as outputting a @PG
        record for itself it will also output an additional @PG record for minimap
        dorado aligner records will have the ID "dorado_aligner" to disambiguate from minimap aligner records.
        Programs will identify themselves as follows
        ont_basecall_client "basecaller"
        dorado basecaller "basecaller"
        dorado barcoder "barcoder"
        dorado aligner "dorado_aligner"
        minimap2 (if used in the application) "aligner"
    - type: PG
      field: PN
      content: <program_name>
      required: true
      comments: |
        "dorado" for dorado application program records. "minimap2" for minimap program records with ID:aligner. "ont_basecall_client", etc.
    - type: PG
      field: CL
      content: command line of invoked application
      required: false
      comments: |
        For dorado/core_cpp/minknow application records, the command line used to invoke the application including the application name.
        For minimap records this field will be omitted, as it was not directly invoked from the command line.
    - type: PG
      field: VN
      content: <program_version>
      required: true
      comments: Version number of the application or minimap version for minimap PG records
    - type: PG
      field: DS
      content: gpu:<gpu_name>
      required: false
      comments: |
        Each GPU type used by the basecaller will appear once, as we’re only interested in the GPU types, not the total
        number of them.
        For a PromethION the tag would say (e.g) DS:gpu:NVIDIA A100 80GB PCIe. If there are multiple GPU types on the
        system they will be separated by a vertical bar e.g: DS:gpu:NVIDIA A100 80GB PCIe|Quadro GV100.
        If a GPU was not used, or the reads were called on Apple Silicon, this field will not be present.
  read_tags:
    - tag: "RG:Z:"
      comment: ID of the read group to which this read belongs. If present its value must match the ID field of a Read Group record in the header section.
    - tag: "qs:f:"
      comment: Read mean basecall qscore
    - tag: "mx:i:"
      comment: "read mux meta: read_data::mux"
    - tag: "ch:i:"
      comment: "read channel meta: read_data::channel"
    - tag: "rn:i:"
      comment: "Read number meta: read_data::read_number"
    - tag: "st:Z:"
      comment: "Read start time metadata field: <read_data::time_stamp>"
    - tag: "f5:Z:"
      comment: "fast5 file name read_data::filename. N.B. filename only so any personally identifiable data in the path is not written."
    - tag: "ns:i:"
      comment: "the number of samples in the signal (read_data::duration)"
    - tag: "ts:i:"
      comment: |
        "<read_data::trimmed_samples> the number of samples trimmed from the start of the signal (equivalent to read_data::duration - read_data::trimmed_duration)"
    - tag: "mv:B:c"
      comment: "sequence to signal move table (this has already been done as per Move table format for BAM file output)"
    - tag: "sm:f:"
      comment: "scaling median: basecall_data::scaling_median"
    - tag: "sd:f:"
      comment: "scaling dispersion (also sometimes referred to as mad, spread): basecall_data::scaling_med_abs_dev"
    - tag: "sv:Z:"
      comment: |
        "med_mad" or "quantile", depending on which scaling method was used by the basecaller: basecall_data::scaling_version"
    - tag: "du:f:"
      comment: "duration of the read (in seconds)"
    - tag: "pi:Z:"
      comment: "parent read id for a split read"
    - tag: "MN:i:"
      comment: "Length of SEQ field when MM/ML tags were generated."
    - tag: "dx:i:"
      comment: "Duplex read indicator. 1 for duplex reads, 0 for simplex reads without duplex offspring, -1 for simplex reads with duplex offspring."
    - tag: "bh:i"
      comment: "Number of bed-file hits. This tag is only included if a bed-file was specified when aligning."
    - tag: "pt:i"
      comment: "Estimated number of bases in the polyA/T tail. This tag is only included if --estimate_poly_a was specified by the client"
