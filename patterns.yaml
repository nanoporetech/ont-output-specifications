patterns:
  asic_id:
    description: "The unique numeric id stored on the asic"
    context: global
    regex: "[A-F0-9]+"
    examples:
      - "433146BC99436123"
      - "123455434"
  flow_cell_id:
    regex: "[A-Z0-9-]+"
    examples:
      - FXX12345
      - PXX12345
      - AAA123
    description: "Identifier programmed on to the flow cell eeprom"
    context: global
  machine_id:
    description: "An identifier for the machine which is running. Sometimes the hostname, but potentially derived from other machine information instead."
    context: global
    regex: "[A-Za-z0-9-]+"
    examples:
      - "my-sequencer"
      - "GXB12345"
      - "PCA100090"
  device_id:
    description: "Identifier for the sequencing device which ran the experiment"
    context: global
    regex: "[A-Za-z0-9-_]+"
    examples:
      - "X1"
      - "MN12345"
      - "1A"
  version_string:
    description: "Version information for the running software"
    context: global
    regex: "[0-9]+\\.[0-9]+\\.[0-9]+(\\.[0-9]+)?(~.+)?"
    examples:
      - "1.2.3"
      - "1.2.3~rc1"
  sample_id:
    description: "A user defined identifier for the library running in the protocol"
    context: global
    regex: "[a-zA-Z0-9_\\.-]+"
    examples:
      - "My_Sample"
      - "my-sample-1"
  protocol_group_id:
    description: "A user defined identifier for a group of protocols"
    context: global
    regex: "[a-zA-Z0-9_\\.-]+"
    examples:
      - "My_Group"
      - "my-group-1"
  daq_start_time:
    description: "The time acquisition started, formatted as ``:%Y%m%d_%H%M``."
    context: global
    regex: "[0-9]{8}_[0-9]{4}"
    examples:
      - "20240103_1424"
  run_id:
    description: "The full run id for the running acquisition."
    context: global
    regex: "[0-9a-f]{40}"
    examples:
      - "de9f2c7fd25e1b3afad3e85a0bd17d9b100db4b3"
  short_run_id:
    description: "The first 8 characters of the full ``run_id``."
    context: global
    regex: "[0-9a-f]{8}"
    examples:
      - "de9f2c7f"
  protocol_run_id:
    description: "The full protocol run id for the running protocol."
    context: global
    regex: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
    examples:
      - "acde070d-8c4c-4f0d-9d8a-162843c10333"
  short_protocol_run_id:
    description: "The first 8 characters of the ``protocol_run_id``."
    context: global
    regex: "[0-9a-f]{8}"
    examples:
      - "acde070d"
  protocol_purpose:
    description: "The purpose of the running protocol, script defined."
    context: global
    regex: "[a-zA-Z0-9_]+"
    examples:
      - "sequencing_run"
  batch_number:
    description: "The index of the file being generated, allowing a set of sequential files to be output, eg: '0', '1', '2'..."
    context: read
    regex: "[0-9]+"
    examples:
      - "0"
      - "1"
  type:
    description: "The type of the data the read's associated barcode is related to (see protocol.proto, BarcodeUserData.SampleType)"
    context: read
    regex: "[a-zA-Z0-9_]+"
    examples:
      - "positive_control"
  alias:
    description: "The user defined alias for the read's associated barcode"
    context: read
    regex: "[a-zA-Z0-9_\\.-]+"
    examples:
      - "My_Sample_Alias"
      - "my-sample-alias-1"
  basecall_model_version_id:
    description: "The model version id for the basecall model running"
    context: read
    regex: "[a-z0-9_@\\.]+"
    examples:
      - "rna004_130bps_fast@v5.1.0"
  duplex_status:
    description: "``_simplex`` or ``_duplex``, depending if the read is a duplex or simplex read"
    context: read
    regex: "_simplex|_duplex"
    examples:
      - "_simplex"
      - "_duplex"
  basecall_status_skip_or_empty:
    description: "``skip`` if the read has skipped basecalling, ```` otherwise"
    context: read
    regex: "skip|"
    examples:
      - "skip"
      - ""
  basecall_status:
    description: "``pass``, ``fail`` or ``skip`` depending on the basecall status of the read"
    context: read
    regex: "pass|fail|skip"
    examples:
      - "pass"
      - "fail"
      - "skip"
  read_start_time:
    description: "The read start time as an rfc3339 string"
    context: read
    regex: "[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}"
    examples:
      - "2025-01-13T10:45:28.681306+00:00"
  pore_type:
    description: "The type of the pore in use for this read"
    context: read
    regex: "[a-zA-Z0-9_\\.]+"
    examples:
      - "r9.4.1"
  channel_name:
    description: "The 1 indexed number for the channel the read was sequenced on"
    context: read
    regex: "[0-9]+"
    examples:
      - "1"
  read_id:
    description: "A unique UUID for the sequenced read (unique even if the read was split in the basecaller)"
    context: read
    regex: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
    examples:
      - "acde070d-8c4c-4f0d-9d8a-162843c10333"
  parent_read_id:
    description: "A unique UUID for the read sent into the basecaller, potentially duplicated if split in basecaller"
    context: read
    regex: "[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}"
    examples:
      - "acde070d-8c4c-4f0d-9d8a-162843c10333"
